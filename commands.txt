		命令小全书
关于端口使用:
3306---MySQL
8090---hadoop

Spark相关
./bin/hdfs dfs -mkdir -p /User/lano/dataSicence/hadoop/data    ---为HDFS文件系统创建使用用户lano的文件目录,即这个data目录就是HDFS使用的目录
./bin/hdfs dfs -ls .    ---查看当前用户lano在HDFS文件系统目录下的文件
./bin/hdfs dfs -put /mydata/word.txt   ---把本地文件word.txt上传到HDFS系统中

val textFile = sc.textFile("hdfs://localhost:9000/user/hadoop/word.txt")
val textFile = sc.textFile("/user/hadoop/word.txt")
val textFile = sc.textFile("word.txt")
以上3条都是从hDFS文件系统中读取数据的方法 
driver-class-path /usr/local/spark/jar/    ---导入jar下面所有文件，与ubuntu有所不同

jps   ---显示JVM里面的进程
kill -9 进程号   ---可以杀掉指定进程
Spring篇

pom.xml---文件不爆红，但仍然无法导入相关依赖，解决办法：
  1.删除.idea文件，重启idea
  2.添加版本号等操作，然后reimport
  3.删除缓存
  4.删掉dependencies重新编辑
  5.删除本地仓库，重新导入
  6.更新repository

command+shift+G   ---进入隐藏目录（/usr/local这些的）


MySQL篇
ERROR! MySQL server PID file could not be found!   ---在/usr/local/mysql/data/目录下创建了HostName.err的文件，并且原本应该存在的mysql.local.pid文件被删除，保留原本存在的mysql.local.err文件(如果没有则新增).
. ERROR! The server quit without updating PID file (/usr/local/mysql/data/lano.pid).   ---出现这个原因是因为mysql进程对/usr/local/mysql/data/下的文件没有写的权限，用chmod -R 777 /usr/local/mysql/data赋予所有权限即可.
CREATE USER 'username'@'%' IDENTIFIED BY 'password';   ---新增用户
grant all privileges on *.* to 'lano'@'%' with grant option;   ---mysql8.0授权命令
FLUSH PRIVILEGES;   ---刷新
select user,host from mysql.user;   ---显示用户名以及访问途径
can't find mysqld.sock ---简单粗暴，直接重装mysql=_=

git篇
git入门http://www.imooc.com/article/19060
git常用命令备忘http://www.imooc.com/article/1111
touch READ.md ---创建文档
git init---初始化
git add READ.md ---添加文档
git commit -m "注释" ---提交到本地仓库
git remote add origin git@github.com:yourname/xxxx.git ---连接到远程仓库，并创建一个叫origin的别名
git push -u origin master ---将本地仓库的文件提交到别名为origin的地址的master分支下，-u为第一次提交，需要创建master分支，下次就不需要了
git config --local -e---修改文件
提交的命令顺序：
git add filesname	
git commit -m "注释"到本地
git pull --- 把github上得同步到本地仓库(当显示错误时执行)
git push --- 同步到github仓库上
---创建文件夹，1.在线创建：先在github上创建在框内输入“／”，然后输入文件夹名，git pull到本地
git remote rm origin ---删除当前关联的仓库
git branch -a ---查看所有分支，＊表示当前所在分支
git clone git@github.com:Ghlano/carbonized.git ---表示从该仓库下载carbonized目录（文件）到本地
git log ---查看提交日志
git reflog ---查看历史命令，以便确定回到未来的哪个版本
git reset --hard HEAD^^^ ---退回到HEAD的前第三个版本
git push -u origin +master ---强行提交

git fetch --all
git reset --hard origin/<branchname>
git pull
---以上三条是强制pull命令

git merge branch ---合并指定的branch分支到当前分支
git rm file ---从版本库中删除文件
git switch -c newBranch ---创建并切换分支
git branch -d branchName ---删除分支
git tag tagName ---打标签，默认commit id为head了
git tag tagName CommitId ---根据commit id打标签
git tag -a <tagname> -m "blablabla..."  ---指定标签信息
git tag -d tagname ---先删除本地tag
git push origin :refs/tags/tagname ---然后删除远程tag


git checkout -- file ---可以撤销工作区的全部修改（情况1:修改后没有存到暂存区，没有进行add；情况2:修改已经添加到暂存区，已经进行add，没有进行commit），让文件回到最近一次git commit或git add的状态

关于git的一些概念：
git add file是把file add到stage, git -m commit ""是把当前修改提交到分支；
git管理的是修改，而不是文件，比如说第一次修改进行了add，第二次修改没有进行add，那么这时候进行commit提交到分支的只有第一次修改。

关于.gitignore文件:
.gitignore本身也需要被添加到版本库内
把不想提交的文件添加打gitignore中，
!filename---  把filename排除在.gitignore规则之外



git版本控制系统可以分为两个区域，工作区以及版本库。
工作区即当前的工作目录，工作区的.git目录是为版本库，版本库最重要的是stage（占存区）,第二个是git自动创建的第一个分支-master，以及指向master的指针head；
工作区是当前肉眼可见的区域，占区对于开发者不可见。

Docker篇
Cannot connect to the Docker daemon at tcp://0.0.0.0:2375. Is the docker daemon running?
solution: 
run:
unset DOCKER_HOST
unset DOCKER_TLS_VERIFY
unset DOCKER_TLS_PATH

相关文件位置：
docker.service:/lib/systemd/system/docker.service
daemon.json:/etc/docker/daemon.json
docker.sock:

docker: Cannot connect to the Docker daemon at unix:///var/run/docker.sock. Is the docker daemon running?.
solution:
sudo vim daemon.json:添加{"registry-mirrors": ["https://registry.docker-cn.com"]}
systemctl restart docker.service

docker: Got permission denied while trying to connect to the Docker daemon socket at unix:///var/run/docker.sock: Post "http://%2Fvar%2Frun%2Fdocker.sock/v1.24/containers/create": dial unix /var/run/docker.sock: connect: permission denied.
solution:
sudo gpasswd -a test docker
newgrp docker

Warning: The unit file, source configuration file or drop-ins of docker.service changed on disk. Run 'systemctl daemon-reload' to reload units.
solution:
sudo rm  /etc/systemd/system/docker.service.d/override.conf
systemctl reset-failed docker.service
 systemctl daemon-reload
 systemctl start docker.service




Homebrew篇

更换brew.git
  cd "$(brew --repo)"
  git remote set-url origin https://mirrors.ustc.edu.cn/brew.git
  git remote set-url origin https://github.com/Homebrew/brew.git
更换homebrew-core.git
  cd "$(brew --repo)/Library/Taps/homebrew/homebrew-core"
  git remote set-url origin https://mirrors.ustc.edu.cn/homebrew-core.git
  git remote set-url origin https://github.com/Homebrew/homebrew-core.git
更换Home cask
  cd "$(brew --repo)"/Library/Taps/homebrew/homebrew-cask
  git remote set-url origin https://mirrors.ustc.edu.cn/homebrew-cask.git
  git remote set-url origin https://github.com/Homebrew/homebrew-cask
更换home bottle
  长期更换：
  echo 'export HOMEBREW_BOTTLE_DOMAIN=https://mirrors.ustc.edu.cn/homebrew-bottles' >> ~/.bash_profile
  source ~/.bash_profile

  临时更换：
  export HOMEBREW_BOTTLE_DOMAIN=https://mirrors.ustc.edu.cn/homebrew-bottles
  
  注释掉bash配置文件里的有关Homebrew Bottles即可恢复官方源。 重启bash或让bash重读配置文件。


vim篇
h ---向前移动光标
j --- 向下移动
k --- 向上移动
l ---向后移动
2h ---向前移动两列，其它类似
/hello ---向后查找关键词hello
?hello ---向前查找关键词hello
* ---向后查找当前光标出得的单词
# ---向前查找当前光标出的单词
brew cask install vim --with-lua ---保持两种版本升级vim，下载到/usr/local/bin/vim目录下
vi .zshrc ---进入配置文件添加
# If you come from bash you might have to change your $PATH.
export PATH=$HOME/bin:/usr/local/bin:$PATH
到最上面
source .zshrc ---让其生效
sudo ln -s /usr/local/bin/vim /usr/local/bin/vi ---建立一个vi的软连接
*但是会发现新版本的vim无法正常使用delete键－－只能删除当前输入*
vi ~/.vimrc ---进入.vimrc,添加set backspace=2
"*yny ---把n行代码复制到系统clipboard
"+yny ---把内容复制到系统clipboard，然后就可以在其他地方粘贴了
*在编辑代码界面，按esc后，键入:set nonu可以把行数去掉*
vim .vimrc ---更改vim的主题
cd /usr/share/vim/vim73/colors ---进入到vim自带的主题目录下
mv newcolorschemes.vim ~/.vim/colors ---把newcolorscheme主题移到~/.vim下，然后可更改主题
git clone git@github.com:Usersname/newcolorscheme.git ---下载主题
vim .zshrc ---更改ohmyzsh主题

anaconda使用
conda config --set auto_activate_base false    ---关闭自动激活环境
chown -R lano:staff anaconda3  ---安装包时出现permittion deny,可以更改文件所有者
conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/
conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main/
   ---添加镜像,也可直接到~/.condarc下直接添加
conda config --remove channels url   ---删除下载通道
conda config --set show_channel_urls yes   ---是否显示下载通道
conda update conda   ---升级conda
conda update anaconda   ---升级anaconda
conda update anaconda-navigator   ---升级
conda create -n envname packageList ---创建虚拟环境，及特定的包
conda env list ---列出所有的虚拟环境
/envpath/python -m pip install pakacge.tar.gz ---将压缩包安装到指定conda环境中,envpath为该环境对应的python路径
$ bash ---启用bash
***在bash下，conda activate envname ---激活虚拟环境
             source deactivate envname  ---关闭虚拟环境
安装指定版本的tensorflow,进入环境下，pip install tensorflow==x.x.x
conda envname list---列出envlist已经安装的包
在环境下，conda list列出已安装的包
jupyter notebook使用conda环境：
  ->激活环境codna activate envname
  ->安装conda install ipykernel
  ->将环境写入notebook的kernel中python -m ipykernel install --user --name envname --display-name "Python envname"
jupyter自动补全代码
  ->在base环境下安装nbextensions
      pip3 install jupyter_contrib_nbextensions
      jupyter contrib nbextension install --user
   ->然后安装nbextensions_configurator
      pip3 install jupyter_nbextensions_configurator
      jupyter nbextensions_configurator enable --user
    ->然后打开jupyter notebook
      在Nbextensions模块勾选 Hinerland
关联jupyter与conda中的环境,在非环境中conda install nb_conda
conda update mkl  ---当在jupyter运行tensorflow出现自动重启时，可更新
                     或者卸载tensoeflow重装
其它
lano@MBP --MBP是hostname，lano是username
sudo scutil --set ComputerName name  修改本机名称
sudo scutil --set HostName name  修改hostname
scutil --get HostName ---获取当前HostName
sudo purge ---清除缓存
zip -r xxx.zip ./* ---压缩文件
unzip filename.zip ---解压文件到当前目录
cat /etc/shells --- 查看系统有多少种shell
vi ~/.zsh_history ---zsh下的命令记录
./a.out > data.txt ---把程序的输出保存到data.tx中(重定向)
./a.out<data.txt ---把data.txt作为程序的输入
cat /etc/shells ---查看系统下的shell
du ---查看磁盘空间状态
ps ---查看当前进程状况
mkdir ---创建目录
rmdir 删除目录
who ---查看用户名和终端类型
echo ---显示指定文件
pwd ---显示目录路径命令
cat filename ---输出文件内容到基本输出
videojs.getPlayers("video-player").html5player.tech_.setPlaybackRate(2)---百度网盘2倍播放
curl:Connection refused    ---解决方法，查询对应网址的ip地址，然后在/etc/hosts文件中添加，例如199.232.68.133 raw.githubusercontent.com

/bin/zsh -c "$(curl -fsSL https://gitee.com/cunkai/HomebrewCN/raw/master/Homebrew.sh)"   ---利用国内镜像安装homebrew

关于ssh
sudo apt-get update ---更新列表
sudo apt-get install openssh-client ---客户端
sudo apt-get install openssh-server ---服务器
sudo service ssh start ---启用ssh
sudo apt-get install uwf ---安装ufw
sudo ufw enable|disable ---关闭|开启防火墙
sudo ufw status ---查看防火墙状态
sudo vim /etc/ssh/sshd_config
	PermiRootLogin yes
	strictModes yes
			---在文件中修改这两行参数，允许ssh登陆
sudo passwd root ---修改登陆密码，出现Permition deny的时候
sudo ssh root@localhost ---测试ssh连接是否可用
ssh root@XXX.XXX.XXX.XXX ---mac下使用远程连接主机

关于linux
    /usr    ---与软件安装执行相关
    /opt    ---第三方软件
    /etc    ---保存配置文件
    /bin    ---重要执行命令(文件)
    /sbin   ---重要的系统执行文件
    /lib    ---各种库函数
    安装NVIDIA驱动:
       sudo vim /etc/modprobe.d/blacklist.conf
         添加blacklist nouveau
       sudo update-initramfs -u------更新内核
       lsmod | grep nouveau   -------查看nouveau是否禁用成功


       sudo sh /.NVIDIA-xxx-xxx-x86.run --no-opengl-files   ----安装驱动，不安装opengl，防止登陆死循环
       -no-x-check    ---安装时关闭x服务
       -no-noouveau-check   ---安装时关闭nouveau
       -no-opengl-files   ---安装时不安装opengl，防止登陆死循环
       no headers  ---解决方法
          ---sudo apt install build-essential
       sudo dpkg --add-architecture i386
       sudo apt update
       sudo apt install libc6:i386   ---安装32位库依赖
    关于mentohust开机启动脚本:
       start_mentohust.sh{
         !#/bin/sh
         sudo mentohust -a1 -d2 -u用户名@有线1x上网服务 -p密码
       }
       sudo chmod a+x start_mentohust.sh
       update-rc.d start-mentohust.sh defaults 95    ---把脚本加入开机自启动队列，一般用靠后的下标
       sudo service start_mentohust.sh               ---启动脚本服务
       sudo reboot                                   ---重启

